// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Shaman extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Shaman entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Shaman must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Shaman", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Shaman | null {
    return changetype<Shaman | null>(store.get("Shaman", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get baal(): Bytes {
    let value = this.get("baal");
    return value!.toBytes();
  }

  set baal(value: Bytes) {
    this.set("baal", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get checkInInterval(): BigInt {
    let value = this.get("checkInInterval");
    return value!.toBigInt();
  }

  set checkInInterval(value: BigInt) {
    this.set("checkInInterval", Value.fromBigInt(value));
  }

  get tokenPerSecond(): BigInt {
    let value = this.get("tokenPerSecond");
    return value!.toBigInt();
  }

  set tokenPerSecond(value: BigInt) {
    this.set("tokenPerSecond", Value.fromBigInt(value));
  }

  get valueScalePercs(): Array<i32> | null {
    let value = this.get("valueScalePercs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toI32Array();
    }
  }

  set valueScalePercs(value: Array<i32> | null) {
    if (!value) {
      this.unset("valueScalePercs");
    } else {
      this.set("valueScalePercs", Value.fromI32Array(<Array<i32>>value));
    }
  }

  get teamLead(): Bytes {
    let value = this.get("teamLead");
    return value!.toBytes();
  }

  set teamLead(value: Bytes) {
    this.set("teamLead", Value.fromBytes(value));
  }

  get sharesOrLoot(): boolean {
    let value = this.get("sharesOrLoot");
    return value!.toBoolean();
  }

  set sharesOrLoot(value: boolean) {
    this.set("sharesOrLoot", Value.fromBoolean(value));
  }

  get summoner(): Bytes {
    let value = this.get("summoner");
    return value!.toBytes();
  }

  set summoner(value: Bytes) {
    this.set("summoner", Value.fromBytes(value));
  }
}

export class Factory extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Factory must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Factory", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get shamans(): Array<Bytes> {
    let value = this.get("shamans");
    return value!.toBytesArray();
  }

  set shamans(value: Array<Bytes>) {
    this.set("shamans", Value.fromBytesArray(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class EventTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventTransaction", id.toString(), this);
    }
  }

  static load(id: string): EventTransaction | null {
    return changetype<EventTransaction | null>(
      store.get("EventTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}
